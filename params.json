{
  "name": "Jasql",
  "tagline": "JSON document storage in SQL",
  "body": "# jasql - JSON document storage in SQL for node.js\r\n\r\n## ![jasql](https://raw.githubusercontent.com/codyzu/jasql/master/resources/logo-200px.png) node.js + JSON + SQL = bliss\r\n\r\n[![Build Status](https://travis-ci.org/codyzu/jasql.svg?branch=master)](https://travis-ci.org/codyzu/jasql)\r\n[![Coverage Status](https://coveralls.io/repos/github/codyzu/jasql/badge.svg?branch=master)](https://coveralls.io/github/codyzu/jasql?branch=master)\r\n\r\njasql is a node.js storage library for storing schemaless documents in various relational databases.\r\nBuilt on knex, jasql supports sqlite3, ~~postgre~~, ~~mysql~~, ~~oracle~~, and ~~mssql~~.\r\nThe API is heavily inspired by pouchdb and is intuitive and designed to be rapidly used in applications exporting REST APIs.\r\n\r\n_support for the missing databases above is coming soon!_\r\n\r\n# Motivation\r\n\r\nWhy not just used mongodb?\r\n\r\nSometimes client and/or infastructure requirements simple don't allow us to choose any database we want.\r\nEnterprises often have DBA's and contracts for using one of the big database names.\r\nUntil now, node.js support for the big relational databases was very limited.\r\nThat time is over... jasql lets you continue focusing on functionality and keeps the dirty SQL details out of your way.\r\n\r\n# Usage\r\n\r\n```javascript\r\nconst Jasql = require('jasql')\r\n\r\nconst jasql = new Jasql()\r\n\r\njasql.initialize()\r\n\r\n  .then(() => jasql.create({\r\n    _id: 'users/Cody',\r\n    name: 'Cody',\r\n    title: 'Software Engineer'\r\n  }))\r\n\r\n  .then(() => jasql.create({\r\n    _id: 'users/Brian',\r\n    name: 'Brian',\r\n    title: 'Quality Engineer'\r\n  }))\r\n\r\n  .then(() => jasql.create({\r\n    _id: 'posts/Cody/' + new Date().toJSON(),\r\n    title: 'How to use jasql',\r\n    body: 'See documentation at http://github.chom/codyzu/jasql'\r\n  }))\r\n\r\n  .then(() => jasql.create({\r\n    _id: 'posts/Cody/' + new Date().toJSON(),\r\n    title: 'Why we may have to use relational databases',\r\n    body: 'Often enterprises already have the expertise and infastructure for relational databases and we have no choice.'\r\n  }))\r\n\r\n  .then(() => jasql.read('users/Cody'))\r\n\r\n  .then((doc) => console.log('User Cody:', doc))\r\n\r\n  .then(() => jasql.list({_id: 'users/%'}))\r\n\r\n  .then((docs) => console.log('All users:', docs))\r\n\r\n  .then(() => jasql.list({_id: 'posts/Cody/%'}))\r\n\r\n  .then((docs) => console.log('All posts by Cody:', docs))\r\n\r\n  .then(() => jasql.destroy())\r\n```\r\n\r\n# Indexes\r\n\r\nBy default, jasql supports a single indexed field names `_id`.\r\nThis can be any string up to 255 characters.\r\nIf you don't define this id, jasql will generate a nice random one for you.\r\n\r\nHowever, don't be limited by randow ids!\r\nNeed documents sorted by date? Try storing the ISO date in the id.\r\nPrefix your ids with the type of the document. This makes retrieving all documents of a given type super easy.\r\n\r\n# Roadmap\r\n\r\n* implement missing db drivers\r\n* add search functionality\r\n* investigate improved indexing\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}